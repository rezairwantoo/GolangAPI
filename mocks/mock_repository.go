// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "case2/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostgresSQLRepository is a mock of PostgresSQLRepository interface.
type MockPostgresSQLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresSQLRepositoryMockRecorder
}

// MockPostgresSQLRepositoryMockRecorder is the mock recorder for MockPostgresSQLRepository.
type MockPostgresSQLRepositoryMockRecorder struct {
	mock *MockPostgresSQLRepository
}

// NewMockPostgresSQLRepository creates a new mock instance.
func NewMockPostgresSQLRepository(ctrl *gomock.Controller) *MockPostgresSQLRepository {
	mock := &MockPostgresSQLRepository{ctrl: ctrl}
	mock.recorder = &MockPostgresSQLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresSQLRepository) EXPECT() *MockPostgresSQLRepositoryMockRecorder {
	return m.recorder
}

// CountAllProduct mocks base method.
func (m *MockPostgresSQLRepository) CountAllProduct(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllProduct", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllProduct indicates an expected call of CountAllProduct.
func (mr *MockPostgresSQLRepositoryMockRecorder) CountAllProduct(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllProduct", reflect.TypeOf((*MockPostgresSQLRepository)(nil).CountAllProduct), ctx)
}

// CountProductBySearch mocks base method.
func (m *MockPostgresSQLRepository) CountProductBySearch(ctx context.Context, req *model.ListRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProductBySearch", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProductBySearch indicates an expected call of CountProductBySearch.
func (mr *MockPostgresSQLRepositoryMockRecorder) CountProductBySearch(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProductBySearch", reflect.TypeOf((*MockPostgresSQLRepository)(nil).CountProductBySearch), ctx, req)
}

// Create mocks base method.
func (m *MockPostgresSQLRepository) Create(ctx context.Context, req model.CreateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPostgresSQLRepositoryMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostgresSQLRepository)(nil).Create), ctx, req)
}

// GetByID mocks base method.
func (m *MockPostgresSQLRepository) GetByID(ctx context.Context, productID int64) (*model.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, productID)
	ret0, _ := ret[0].(*model.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPostgresSQLRepositoryMockRecorder) GetByID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostgresSQLRepository)(nil).GetByID), ctx, productID)
}

// List mocks base method.
func (m *MockPostgresSQLRepository) List(ctx context.Context, req *model.ListRequest) ([]model.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, req)
	ret0, _ := ret[0].([]model.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPostgresSQLRepositoryMockRecorder) List(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPostgresSQLRepository)(nil).List), ctx, req)
}

// Update mocks base method.
func (m *MockPostgresSQLRepository) Update(ctx context.Context, req model.UpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPostgresSQLRepositoryMockRecorder) Update(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostgresSQLRepository)(nil).Update), ctx, req)
}
